#+TITLE K&R Notes
#+HTML_DOCTYPE: html5

* Tracking
  DEADLINE: <2016-11-22 Tue>

* Errata

http://www.bien-programmer.fr/2ediffs.html


* DONE [10/10] CHAPTER 1: A Tutorial Introduction

One method of communicating data between functions is for the calling function to provide a list of values, called arguments, to the function it calls.

A sequence of characters in double quotes, like "hello, world\n" , is called a character
string or string constant.

printfnever supplies a newline character automatically.

18:53:16        +Nistur | Ok, what kind of fucking screws do I need for this fucking case?
18:53:26 +barcelona1937 | the fucking ones
18:53:30 +barcelona1937 | clearly


** DONE 1.1 Getting Started
Nothing much important...


** DONE 1.2 TODO vars arithmetic exprs

C, TODO as in many other languages, integer division truncates: any fractional part is discarded. Since 5 and 9 are integers. 5/9 would be truncated to zero and so all the Celsius temperatures
would TODO be reported as zero.

5 TODO is a constant.

If TODO an arithmetic operator has integer operands, an integer operation is performed. If an
arithmetic TODO operator has one floating-point operand and one integer operand, however, the
integer TODO will be converted to floating point before the operation is done. If we had written
(fahr-32) TODO , the 32 would be automatically converted to floating point.

: printf("%6.2f\n", 1.234);
:   1.23

So, TODO 6 means, 2 spaces of padding, 1, the dot, and the two decimal places, which means the 6 counts everything.
1.23 TODO are four characters. Then, just padd 2 spaces on the left.

\% TODO is not %, but %% is %.

printf("%15s\t%15s\n", "Fahrenheit", "Celsius") e é imprimido um único espaço no lugar do \t? Por que?

: 09:30:04  Fernando-Basso | I have printf("%15s\t%15s\n", "Fahrenheit", "Celcius");, and it
:                          | prints one space for \t.
: 09:30:07  Fernando-Basso | Why?
: 09:31:30    Love4Boobies | What do you expect it to print?
: 09:32:11  Fernando-Basso | \t to print 8 spaces, or 4, but not 1 space.
: 09:32:26          mi6x3m | Fernando-Basso: What do you print to? The console?
: 09:32:41  Fernando-Basso | Yep, urxvt, tmux.
: 09:33:01          mi6x3m | well \t is not a displayable character, it's a control character.
: 09:33:09          mi6x3m | your output environment interprets it as 1 space
: 09:33:11    Love4Boobies | Fernando-Basso: A tab is usually rendered as space up to the next
:                          | tabstop, not as a fixed number of spaces.
: 09:33:58    Love4Boobies | In this case, the tabsop is likely 8 so the next tabstop would be
:                          | at 16---meaning you are one space away from it.
: 09:35:32    Love4Boobies | Note that you may very well be able to configure your terminal to
:                          | have a tabstop every 3 characters, say.


** DONE 1.3 The For Statement

file:./examples/chap01/04-fahr-cels-for.c
#+INCLUDE: "./examples/chap01/04-fahr-cels-for.c" src c

In any context where it is permissible to usethe value of some type, you can use a more complicated expression of that type (that results in a value of that type).


** DONE 1.4 Symbolic Constants

: #define <name> <replacement list>

There is no semicolon at the end! Thereafter, any occurrence of name (not in quotes and not part of another name) will be
*replaced* by the corresponding replacement text.

file:./examples/chap01/05-symbconst.c
#+INCLUDE: "./examples/chap01/05-symbconst.c" src c

Symbolic constants are /not/ variables. And remember, *no semicolon at the end of the define line*.


*** Block scope

If you declare a variable outside the loop, it is acessible inside the loop. If, however, you declare it inside the block, then you cannot access it from outside the block.

#+BEGIN_SRC c
int main(void)
{
    int i; // declare i
    int z; // declare z

    // i is accessible inside for, declared outside.
    for (i = 0; i < 2; i += 1) {
        // z is also accessed here, no problem.
        // z was declared outside the block.
        z = 10;

        // Declared inside the block, can't be used outside.
        int k = 5;
    }

    printf("%d\n", i); // → 2.
    printf("%d\n", z); // → 10.
    printf("%d\n", k); // → Error. ‘k’ is does not exist in this scope.

    return 0;
}

#+END_SRC


** DONE 1.5 Character Input and Output

A *text stream* is a sequence of characters divided into lines; each line consists of
zero or more characters followed by a newline character.

~getchar~ is the same as ~getc(stdin)~ (read ~man 3 getc~).

~getchar~ reads the character as its ~int~ value. ~putchar~ prints the int value as a character.


*** DONE 1.5.1 File Copying

~EOF~ is defined in ~stdio.h~, and it is -1 on my system.

~!=~ is a [[https://en.wikipedia.org/wiki/Relational_operator][relational operator]].

Is the type ~char~ an unsigned small int (greater than zero)?

file:./examples/chap01/06-getchar-while.c
#+INCLUDE: "./examples/chap01/06-getchar-while.c" src scheme


*** DONE Operational Operators Precedence

~!=~ has higher precedence than ~=~.

: c = getchar() != EOF

is equivalent to

: c = (getchar() != EOF)

which has the undesired effect of setting c to 0 or 1, depending on whether or not the call of
getchar returned end of file.Therefore, you generally want

: (c = getchar()) != EOF

file:./examples/chap01/07-getchar-while-v2.c
#+INCLUDE: "./examples/chap01/07-getchar-while-v2.c" src c

0 is false is 1 is truthy.


*** DONE 1.5.2 Character Counting

++ and -- can be used as prefix and postfix operators (but not as infix operators).

Use ~%ld~ to printf a long int.

~printf~ uses ~%f~ for both ~float~ and ~double~.

If a ~for~ loop doesn't need a real block, one can use a *null statement*.

: for (nc = 0; getchar() != EOF; ++nc)
:     ;

Note the lone semicolon.

file:/examples/chap01/08-char-count-while.c
#+INCLUDE: "./examples/chap01/08-char-count-while.c" src c

file:/examples/chap01/09-char-count-for.c
#+INCLUDE: "./examples/chap01/09-char-count-for.c" src c


*** DONE 1.5.3 Line Counting

The standard library ensures that an input text stream appears as a sequence of lines, each terminated by a newline. Hence, counting lines is just counting newlines.

file:./examples/chap01/10-count-lines.c
#+INCLUDE: "./examples/chap01/10-count-lines.c" src scheme

Careful not to use a single ~=~ when you intend to use ~==~, because in a test, ~foo = bar~ is a valid expression.

'a' (single quotes) is a *character constant* and its value is the integer that represent "a" in the machine's character set.

file:./other/02-charconst.c
#+INCLUDE: "./other/02-charconst.c" src scheme

Escape sequences (~\n~, ~\t~, etc) worth both inside single and double quotes, and count as a single character [fn:1]


**** Errata

Page 22

"...on the other hand, '\n' is a string constant that happens to contain only one character."

Note that they use single quotes in '\n'. They probably meant "\n" (double quotes).

Exercise 1-8, 1-9, 1-10.


*** DONE 1.5.4 Word Counting

Associates from right to left, so, this is not special syntax.
: nl = nw = nc = 0;

~&&~ is higher precedence than ~||~.

file:./examples/chap01/11-word-count.c
#+INCLUDE: "./examples/chap01/11-word-count.c" src c


*** Exercises

file:./exercises/chap01/05-fahr-cels-for-rev.c
#+INCLUDE: "./exercises/chap01/05-fahr-cels-for-rev.c" src c

file:./exercises/chap01/06-getchar-eof-comp.c
#+INCLUDE: "./exercises/chap01/06-getchar-eof-comp.c" src c

file:./exercises/chap01/07-value-of-eof.c
#+INCLUDE: "./exercises/chap01/07-value-of-eof.c" src c

file:./exercises/chap01/08-count-whitespace.c
#+INCLUDE: "./exercises/chap01/08-count-whitespace.c" src c

file:./exercises/chap01/09-squeeze-blanks.c
#+INCLUDE: "./exercises/chap01/09-squeeze-blanks.c" src c

file:f/exercises/chap01/10-visual-control-chars.c
#+INCLUDE: "./exercises/chap01/10-visual-control-chars.c" src c

1-11: files very lager that would overflow the variables, corrupt data.

file:./exercises/chap01/12-word-per-line.c
#+INCLUDE: "./exercises/chap01/12-word-per-line.c" src c


** DONE 1.6 Arrays

All mean the same thing:

The first one allows you to easily see the interval!

- ~'0' <= c && c <= '9'~
- ~'9' >= c && c >= '0'~
- ~c >= '0' && c <= '9'~

'0' = 48, '1' = 49
'0' - '1'
48  - 49 = 1.

An array subscript can be any integer expression (~5~, ~i~, ~i + 3~, c - '0').


*** Example 12 count char types

file:./examples/chap01/12-count-char-types.c
#+INCLUDE: "./examples/chap01/12-count-char-types.c" src c


*** DONE Exercise 1-13 - count char types histogram

file:./exercises/chap01/13-histogram-horizontal.c
#+INCLUDE: "./exercises/chap01/13-histogram-horizontal.c" src c

file:./exercises/chap01/13b-histogram-vertical.c
#+INCLUDE: "./exercises/chap01/13b-histogram-vertical.c" src c

file:./exercises/chap01/13c-histogram-vertical.c
#+INCLUDE: "./exercises/chap01/13c-histogram-vertical.c" src c


*** DONE Exercise 1-14 histogram char types

file:./exercises/chap01/14-hist-chars-types.c
#+INCLUDE: "./exercises/chap01/14-hist-chars-types.c" src c


** DONE 1.7 Functions

With properly designed functions, itis possible to ignore /how/ a job is done; knowing /what/ is done is sufficient.

The word “name” is used with the same meaning as “identifier”.

*formal arguments* are the names used when declaring a funtion. *actual arguments* are the atual values passed when invoking function.

Main returns a value to the environment in which it is running. 0 means “normal” termination (no problems or errors whatsoever) and any other value signals some sort of error.

file:./examples/chap01/13-power.c
#+INCLUDE: "./examples/chap01/13-power.c" src c


*** Exercise Fahr Cels Functions

file:./exercises/chap01/15-fahr-cels-functs.c
#+INCLUDE: "./exercises/chap01/15-fahr-cels-functs.c" src c


** DONE 1.8 Arguments - Call by Value

file:./examples/chap01/14-power-by-value.c
#+INCLUDE: "./examples/chap01/14-power-by-value.c" src c


** DONE 1.9 Character Arrays

When the name of an array is used as an argument, the value passed to the function is the location or address of the beginning of the array - there is no copying of array elements. By subscripting this value, the function can access and alter any argument of the array.

You don't need ~string.h~ to use ~printf("%s", str)~.

file:./examples/chap01/15-longest-line-char-array-ref.c
#+INCLUDE: "./examples/chap01/15-longest-line-char-array-ref.c" src c


*** Exercise 16 longest line

file:./exercises/chap01/16-print-lines.c
#+INCLUDE: "./exercises/chap01/16-print-lines.c" src c


*** Exercise 17 print lines longer than N chars

file:./exercises/chap01/17-print-lines-longer-than.c
#+INCLUDE: "./exercises/chap01/17-print-lines-longer-than.c" src c


*** Exercise 18 remove trailing blanks from lines

file:./exercises/chap01/18-trim-l-r.c
#+INCLUDE: "./exercises/chap01/18-trim-l-r.c" src c

Create the object of the lib:
: gcc -std=c99 -Wall -pedantic -fPIC -o lib/line.o -c ./lib/line.c

Create the shared object:
: gcc -shared -o ./lib/libmyline.so ./lib/line.o

Compile main program with the libs (not that is 'l' 'myline' (without 'lib'):
: gcc -Wall -L./lib -o ./devel devel.c -lmyline

Run te program telling it where the lib is to be found:
: LD_LIBRARY_PATH=./lib ./devel


*** Exercise 19 reverse lines

Remember that even though strings start at position zero, the zeroth character produces length 1 (not zero). So, "bar\n\0" is:

| index  | 0 | 1 | 2 |  3 |  4 |
| string | b | a | r | \n | \0 |
| length | 1 | 2 | 3 |  4 |    |

file:./exercises/chap01/19-reverse.c
#+INCLUDE: "./exercises/chap01/19-reverse.c" src c


** DONE 1.10 External Variables and Scope

AUTOMATIC VARIABLES = local variables: they are created when the function is executed and disappear when the function exits.
EXTERNAL VARIABLES = global variables.



** Example longest line external variables

file:./examples/chap01/16-longest-line-extern.c
#+INCLUDE: "./examples/chap01/16-longest-line-extern.c" src c

“If the definition of the external variable occurs in the source file before its use in a particular function, then there is no need for an extern declaration in the function.”

** Exercise 20 - detab

file:./exercises/chap01/20-detab.c
#+INCLUDE: "./exercises/chap01/20-detab.c" src c


** Exercise 21 - entab

file:./exercises/chap01/21-entab.c
#+INCLUDE: "./exercises/chap01/21-entab.c" src c


** Exercise 22 - wrap lines

Why does strtol returns a long integer but I can store it in an int and the compiler doesn't complain.
http://stackoverflow.com/questions/13652556/what-happens-when-i-assign-long-int-to-int-in-c

file:./exercises/chap01/22-wrap.c
#+INCLUDE: "./exercises/chap01/22-wrap.c" src c


** Exercise 23 - remove comments

#+INCLUDE: "./exercises/chap01/23-remove-comments.c" src c
file:./exercises/chap01/23-remove-comments.c


** Exercise 24 - check syntax

#+INCLUDE: "./exercises/chap01/24-check-syntax.c" src c
file:./exercises/chap01/24-check-syntax.c



* TODO [6/12] CHAPTER 2: Types, Operators, and Expressions

Words like short or long are known as /quilifiers/.

** DONE 2.1 Variable Names


** DONE 2.2 Data Types and Sizes


** Exercise 01 - limits

#+INCLUDE: "./exercises/chap02/01-limits.c" src c
file:./exercises/chap02/01-limits.c


** DONE 2.3 Constants and Enums

#+INCLUDE: "./examples/chap02/01-strlen.c" src c
file:./examples/chap02/01-strlen.c

#+INCLUDE: "./examples/chap02/02-enums.c" src c
file:./examples/chap02/02-enums.c


** DONE 2.4 Declarations

** DONE 2.5 Arithmetic Operators

*** Example Leap Years and Enums

#+INCLUDE: "./examples/chap02/03-leap-year-enums.c" src c
file:./examples/chap02/03-leap-year-enums.c


** DONE 2.6 Relational and Logical Operators

*** Exercise 02 loop no ANDs and ORs

#+INCLUDE: "./exercises/chap02/02-loop-no-ands-ors.c" src c
file:./exercises/chap02/02-loop-no-ands-ors.c


** WORKING 2.7 Type Conversions

*** Example atoi

We added some checking to convert negative numbers as well.

#+INCLUDE: "./examples/chap02/04-atoi.c" src c
file:./examples/chap02/04-atoi.c


*** Example case conversion

#+INCLUDE: "./examples/chap02/05-case-conv.c" src c
file:./examples/chap02/05-case-conv.c

*** Example Pseudo-Rrand

#+INCLUDE: "./examples/chap02/06-pseudo-rand.c" src c
file:./examples/chap02/06-pseudo-rand.c


** TODO 2.8 Increment and Decrement Operators


** TODO 2.9 Bitwise Operators


** TODO 2.10 Assignment Operators and Expressions


** TODO 2.11 Conditional Expressions


** TODO 2.12 Precedence and Order of Evaluation


* TODO [0/8] CHAPTER 3: Control Flow


** TODO 3.1 Statements and Blocks


** TODO 3.2 If-Else


** TODO 3.3 Else-If


** TODO 3.4 Switch


** TODO 3.5 Loops—While and For


** TODO 3.6 Loops—Do-while


** TODO 3.7 Break and Continue


** TODO 3.8 Goto and Labels


* TODO [0/11] CHAPTER 4: Functions and Program Structure


** TODO 4.1 Basics of Functions


** TODO 4.2 Functions Returning Non-integers


** TODO 4.3 External Variables


** TODO 4.4 Scope Rules


** TODO 4.5 Header Files


** TODO 4.6 Static Variables


** TODO 4.7 Register Variables


** TODO 4.8 Block Structure


** TODO 4.9 Initialization


** TODO 4.10 Recursion


** TODO 4.11 The C Preprocessor


* TODO [0/12] CHAPTER 5: Pointers and Arrays


** TODO 5.1 Pointers and Addresses


** TODO 5.2 Pointers and Function Arguments


** TODO 5.3 Pointers and Arrays


** TODO 5.4 Address Arithmetic


** TODO 5.5 Character Pointers and Functions


** TODO 5.6 Pointer Arrays; Pointers to Pointers


** TODO 5.7 Multi-dimensional Arrays


** TODO 5.8 Initialization of Pointer Arrays


** TODO 5.9 Pointers vs. Multi-dimensional Arrays


** TODO 5.10 Command-line Arguments


** TODO 5.11 Pointers to Functions


** TODO 5.12 Complicated Declarations


* TODO [0/9] CHAPTER 6: Structures


** TODO 6.1 Basics of Structures


** TODO 6.2 Structures and Functions


** TODO 6.3 Arrays of Structures


** TODO 6.4 Pointers to Structures


** TODO 6.5 Self-referential Structures


** TODO 6.6 Table Lookup


** TODO 6.7 Typedef


** TODO 6.8 Unions


** TODO 6.9 Bit-fields


* TODO [0/8] CHAPTER 7: Input and Output


** TODO 7.1 Standard Input and Output


** TODO 7.2 Formatted Output—Printf


** TODO 7.3 Variable-length Argument Lists


** TODO 7.4 Formatted Input—Scanf


** TODO 7.5 File Access


** TODO 7.6 Error Handling—Stderr and Exit


** TODO 7.7 Line Input and Output


** TODO 7.8 Miscellaneous Functions


* TODO [0/7] CHAPTER 8: The UNIX System Interface


** TODO 8.1 File Descriptors


** TODO 8.2 Low Level I/O—Read and Write


** TODO 8.3 Open, Creat, Close, Unlink


** TODO 8.4 Random Access—Lseek


** TODO 8.5 Example—An Implementation of Fopen and Getc


** TODO 8.6 Example—Listing Directories


** TODO 8.7 Example—A Storage Allocator


* TODO [0/12] APPENDIX A: Reference Manual


A1. TODO Introduction
** TODO A2. Lexical Conventions


** TODO A3. Syntax Notation


** TODO A4. Meaning of Identifiers


** TODO A5. Objects and Lvalues


** TODO A6. Conversions


** TODO A7. Expressions


** TODO A8. Declarations


** TODO A9. Statements


** TODO A10. External Declarations


** TODO A11. Scope and Linkage


** TODO A12. Preprocessing


** TODO A13. Grammar


* TODO [0/11] APPENDIX B: Standard Library


** TODO B1. Input and Output: <stdio.h>


** TODO B2. Character Class Tests: <ctype.h>


** TODO B3. String Functions: <string.h>


** TODO B4. Mathematical Functions: <math.h>


** TODO B5. Utility Functions: <stdlib.h>


** TODO B6. Diagnostics: <assert.h>


** TODO B7. Variable Argument Lists: <stdarg.h>


** TODO B8. Non-local Jumps: <setjmp.h>


** TODO B9. Signals: <signal.h>


** TODO B10. Date and Time Functions: <time.h>


** TODO B11. Implementation-defined Limits: <limits.h> and <float.h>


* Footnotes

[fn:1] The C Programming Language, page 22. The use '\n' in single quote, where they probably meant "\n" in double quote.








